<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hacktoberfest on stuart crust</title>
    <link>https://stuartcrust.com/categories/hacktoberfest/</link>
    <description>Recent content in Hacktoberfest on stuart crust</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Oct 2018 00:00:00 -0400</lastBuildDate>
    
        <atom:link href="https://stuartcrust.com/categories/hacktoberfest/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hacktoberfest - Week Three</title>
      <link>https://stuartcrust.com/2018/10/hacktoberfest---week-three/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>https://stuartcrust.com/2018/10/hacktoberfest---week-three/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;As of last week we are just about half way through Hacktoberfest. Time is just flying by, and I can&#39;t believe how quickly it&#39;s passing. In my &lt;a class=&#34;reference external&#34; href=&#34;2018/10/hacktoberfest---week-two/&#34;&gt;previous Hacktoberfest post&lt;/a&gt; I wrote about my slightly self-interested contribution to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca/purehugo&#34;&gt;dplesca/purehugo&lt;/a&gt;, the theme I use for this blog, and how I used some of Hugo&#39;s built-in functions to normalize URLs that used the &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; variable.&lt;/p&gt;
&lt;p&gt;My contribution this week for Hacktoberfest is minor, but it started me on a path to encounter a number of issues with a common theme that should leave me with plenty of work to do over the next few weeks and possibly past the end of the month.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;theme-week-documentation&#34;&gt;
&lt;h2&gt;Theme Week: Documentation&lt;/h2&gt;
&lt;p&gt;There has been a trend over the last number of years for contributors to open source to diversify how they contribute to open source. Code is not the only kind of contribution maintainers hope to receive, and they are happy to receive contributions in the form of documentation, code examples, sample projects, and feedback from first-time users, among others.&lt;/p&gt;
&lt;p&gt;For Hacktoberfest week three, I focused my efforts on project documentation, or a lack thereof, specifically from the perspective of a new user. So far during Hacktoberfest I haven&#39;t made more than one contribution to the same project; instead I&#39;ve jumped around quite a bit to different projects that use many different languages and project structures. This project hopping has given me some perspective on the onboarding and getting started instructions of a number of projects, which are critical for encouraging adoption and helping new users get up to speed on how to use or contribute to a project, application, or service. Dcumentation can also be tricky to get right the first, second, or even fifth time because it is hard to write a document that is useful for every audience, especially if the topic is technical in nature and the author(s) can&#39;t make many assumptions about the audence&#39;s technical background or ability. Many projects deal with this by dividing the documentation in two: one set of high-level documentation on getting the project up and running aimed at users, and another set of documentation that augments and extends this high-level documentation aimed at contributors and developers that provides much more technical detail.&lt;/p&gt;
&lt;p&gt;This past week also reiterates the importance of contributing to projects in ways other than implementing new features, writing test cases, or fixing bugs in code. There are so many ways to contribute to open source projects, and one of the best ways new contributors can help a project is to verify the project&#39;s onboarding flow by following basic steps like the project setup information and getting their development environment up and running. These are tasks that established contributors and maintainers do not have to do very often and documentation can get out of date; new contributors are great at spotting problem areas in guides, tutorials, and example code that can improve the onboarding experience and identify areas where further explanation may be necessary that established contributors may not be able to see.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;project-one-rust-wasm&#34;&gt;
&lt;h2&gt;Project One: &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;rust-wasm&lt;/span&gt;&lt;/tt&gt;&lt;/h2&gt;
&lt;p&gt;I have been excited about &lt;a class=&#34;reference external&#34; href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; since I first heard about the work being done to support it in multiple browser engines. WebAssembly is a binary instruction format predominantly designed for the web (though its success on the web will surely spur adoption in other areas just as NodeJS forced us to rethink possible applications for JavaScript) that can be targeted by many other languages like C++, Rust, Go, and Java, among others. &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;rust-wasm&lt;/span&gt;&lt;/tt&gt; is the Rust initiative to provide compilation for the wasm target as well as support interoperation with existing JavaScript code both shipped in browsers and provided as libraries through tools like &lt;tt class=&#34;docutils literal&#34;&gt;npm&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I wanted to get up and running with WebAssembly as a comilation target for Rust, so I decided to read some of the core documentation provided by the &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;rust-wasm&lt;/span&gt;&lt;/tt&gt; team: the &lt;a class=&#34;reference external&#34; href=&#34;https://rustwasm.github.io/book/&#34;&gt;Rust and WebAssembly Book&lt;/a&gt;. After taking a brief detour to set up a &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/0xazure/homebrew-tap/blob/master/Formula/wasm-pack.rb&#34;&gt;personal Homebrew tap&lt;/a&gt; for the &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;wasm-pack&lt;/span&gt;&lt;/tt&gt; tool (which I hope, once the prerequisite Rust version lands on the stable channel, I will be able to contribute back to &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;homebrew/hombrew-core&lt;/span&gt;&lt;/tt&gt; and &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;rust-wasm&lt;/span&gt;&lt;/tt&gt;), I was able to set up all of the necessary project dependencies to start working through &lt;a class=&#34;reference external&#34; href=&#34;https://rustwasm.github.io/book/game-of-life/introduction.html&#34;&gt;the tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;hello-world&#34;&gt;
&lt;h3&gt;Hello, World!&lt;/h3&gt;
&lt;p&gt;The Rust and WebAssembly Book bases the tutorial off a project template to get new users up and running more quickly. It spends a portion of &lt;a class=&#34;reference external&#34; href=&#34;https://rustwasm.github.io/book/game-of-life/hello-world.html&#34;&gt;the introductory section&lt;/a&gt; talking about each file in the template and its purpose in the larger project. When I got to the section describing &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;wasm-game-of-life/src/utils.rs&lt;/span&gt;&lt;/tt&gt;, I was given this explanation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;tt class=&#34;docutils literal&#34;&gt;src/utils.rs&lt;/tt&gt; module provides a couple included batteries that we will use later in the tutorial. We can ignore it for now.&lt;/p&gt;
&lt;p class=&#34;attribution&#34;&gt;&amp;mdash;Rust and WebAssembly, &lt;em&gt;5.2 - Hello, World!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After the reasonably detailed explanations of other files in the project, this section stood out to me as one that could be improved. This section also makes reference to a philosophy of &amp;quot;batteries included&amp;quot;, which I had only ever been exposed to before &lt;a class=&#34;reference external&#34; href=&#34;https://docs.python.org/2/tutorial/stdlib.html#batteries-included&#34;&gt;in Python jargon&lt;/a&gt; and that may not be familiar to everyone who has not had a similar exposure, or for whom English is not their primary language and the idiom is lost in translation.&lt;/p&gt;
&lt;p&gt;Being a fresh set of eyes on the Rust and WebAssembly Book, I filed &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/rustwasm/book/issues/127&#34;&gt;rustwasm/book#127&lt;/a&gt; to discuss some suggestions for how this section could be improved without the need for jargon-heavy idioms and to provide more details about the particular module in question. At the time of publishing I have not heard back from anyone on the &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;rust-wasm&lt;/span&gt;&lt;/tt&gt; team, but I am hopeful that I will be able to submit a pull request before the end of the month to improve this part of the tutorial.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;typos-and-transcription-errors&#34;&gt;
&lt;h3&gt;Typos and Transcription Errors&lt;/h3&gt;
&lt;p&gt;Reading through the rest of the page, I ran across the simple error of a duplicated word in the explanation of &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;wasm-game-of-life/www/index.js&lt;/span&gt;&lt;/tt&gt;. I submitted my correction as &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/rustwasm/book/pull/128&#34;&gt;rustwasm/book#128&lt;/a&gt; and it was accepted the same day. I even received a &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/rustwasm/book/pull/128#pullrequestreview-167612434&#34;&gt;congratulatory message&lt;/a&gt; from one of the maintainers on my first contribution to the project which, as my first interaction with any of the project maintainers, is a nice personal touch that definitely makes me wanto to continue to contribute to &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;rust-wasm&lt;/span&gt;&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;project-two-diesel&#34;&gt;
&lt;h2&gt;Project Two: Diesel&lt;/h2&gt;
&lt;p&gt;I have been playing around with reimplementing a currently active Postgresql-backed project using Rust, and discovered &lt;a class=&#34;reference external&#34; href=&#34;http://diesel.rs/&#34;&gt;Diesel&lt;/a&gt; as one of the ORM tools at the forefront of Rust development stacks. As with &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;rust-wasm&lt;/span&gt;&lt;/tt&gt;, I have not used Diesel in any of my projects, so I turned to the &lt;a class=&#34;reference external&#34; href=&#34;http://diesel.rs/guides/getting-started/&#34;&gt;getting started guide&lt;/a&gt; Diesel provides. It wasn&#39;t long after I got the &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;diesel-cli&lt;/span&gt;&lt;/tt&gt; tool installed that I ran into a discrepancy between the guide and the behaviour of the CLI tool, so I filed &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/diesel-rs/diesel/issues/1891&#34;&gt;diesel-rs/diesel#1891&lt;/a&gt; to detail my expectations along with the actual output the tool was producing, as well as some suggestions for improving the clarity of documentation in a few disparate but related areas of the codebase and guide.&lt;/p&gt;
&lt;p&gt;I am of course very greatful for the guide because it is much more approachable - with many code samples and examples - than reading highly technical API documentation or &lt;tt class=&#34;docutils literal&#34;&gt;man&lt;/tt&gt; pages. However, it can be intimidating for a new user if they are following along with the steps in the guide and something unexpected happens; often the new user doesn&#39;t know if they did something in the wrong order or missed an important step, or if the guide is simply out of date and they are not sure how to get around the outdated part to continue their progress. It is also common for code and documentation to get out of sync, resulting in confused and annoyed users. Unfortunately there isn&#39;t a great technical solution to this issue and authors need to always take care to not only update code but also documentation, though Rust&#39;s &lt;a class=&#34;reference external&#34; href=&#34;https://doc.rust-lang.org/rustdoc/documentation-tests.html&#34;&gt;documentation tests&lt;/a&gt; are one example of a tool that can help by ensuring that example code included in comments is up to date and working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;project-next&#34;&gt;
&lt;h2&gt;Project: Next&lt;/h2&gt;
&lt;p&gt;As I am still a new user of &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;rust-wasm&lt;/span&gt;&lt;/tt&gt; and &lt;a class=&#34;reference external&#34; href=&#34;http://diesel.rs/&#34;&gt;Diesel&lt;/a&gt;, I am sure there are still many things I can contribute to these projects, both in terms of improving the onboarding experience for new users as well as other non-code contributions. I also have my eye on a few areas of the guide for &lt;a class=&#34;reference external&#34; href=&#34;https://rocket.rs/guide&#34;&gt;Rocket&lt;/a&gt;, a web framework written in Rust that was the reason I started using Diesel. I&#39;m hoping to hear back soon about the two issues I filed to improve documentation, and I&#39;d like to take the time this month to shepherd them through to getting pull requests opened and merged. As for this week, I&#39;ll be picking out my next few contributions for Hacktoberfest and might also start thinking about picking a project to stick with for a while now that I&#39;ve worked on a number of projects so far this term.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hacktoberfest - Week Two</title>
      <link>https://stuartcrust.com/2018/10/hacktoberfest---week-two/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>https://stuartcrust.com/2018/10/hacktoberfest---week-two/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;Hacktoberfest week two! &lt;a class=&#34;reference external&#34; href=&#34;2018/10/hacktoberfest---week-one/&#34;&gt;Week one&lt;/a&gt; was all about getting into the groove of Hacktoberfest, making a small change to contribute, and finding out about other awesome projects in open source and &lt;a class=&#34;reference external&#34; href=&#34;categories/rust/&#34;&gt;my area of interest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My contribution for this week had a bit more self-interest involved; I contributed a change to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca/purehugo&#34;&gt;dplesca/purehugo&lt;/a&gt;, the &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; blog theme I use for this blog, to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca/purehugo/pull/26&#34;&gt;normalize URLs&lt;/a&gt; that use Hugo&#39;s &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; variable.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;the-problem&#34;&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Using the &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca/purehugo&#34;&gt;dplesca/purehugo&lt;/a&gt; theme, I was noticing that many links to other parts of the site - that is, links that were not external links to e.g. GitHub or Twitter - contained multiple slashes after the site root. Modern web browsers are really good at dealing with partially-malformed URLs so there was no functional problem with any of the links as the browser&#39;s URL parser took over and cleaned them up into a value it could resolve, but it would still be better if the URLs were correctly formatted when Hugo generates the static site content.&lt;/p&gt;
&lt;p&gt;The malformed URLs looked something like this:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;pure-button&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;http://localhost:1313//index.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;[...]&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;post-category post-category-open source&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;http://localhost:1313//categories/open-source&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;open source&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Delving into the template code revealed how &lt;tt class=&#34;docutils literal&#34;&gt;dplesca/purehugo&lt;/tt&gt; was generating the URLs:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;pure-button&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;{{ .Site.BaseURL }}/index.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;[...]&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;post-category post-category-{{ . }}&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;{{ $baseUrl }}/categories/{{ . | urlize }}&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;{{ . }}&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The template string used &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; and appended a slash before the next URL fragment. Since this results in a double slash in the generated output, I presume but have not confirmed that &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; always ends in a trailing slash that needs to be taken into consideration when generating URLs relative the the site&#39;s root.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;the-solution&#34;&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;In a similar way to how we join file paths in NodeJS with &lt;a class=&#34;reference external&#34; href=&#34;https://nodejs.org/api/path.html#path_path_join_paths&#34;&gt;path.join()&lt;/a&gt;, we almost never want to be responsible for building URL paths ourselves. Luckily, Hugo provides &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/functions/&#34;&gt;many built-in helper functions&lt;/a&gt; that cover a whole range of use cases, including the one I decided to use to normalize URL paths throughout &lt;tt class=&#34;docutils literal&#34;&gt;dplesca/purehugo&lt;/tt&gt;: &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/functions/absurl/.&#34;&gt;absURL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the Hugo documentation, &lt;tt class=&#34;docutils literal&#34;&gt;absURL&lt;/tt&gt;&lt;/p&gt;
&lt;blockquote&gt;
Creates an absolute URL based on the configured &lt;tt class=&#34;docutils literal&#34;&gt;baseURL&lt;/tt&gt;.&lt;/blockquote&gt;
&lt;p&gt;where &lt;tt class=&#34;docutils literal&#34;&gt;baseURL&lt;/tt&gt; is the hostname (and path) to the root of the site which is set as part of Hugo&#39;s &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/getting-started/configuration/#all-configuration-settings&#34;&gt;site configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This function was a perfect solution in most of the places where static files need to be linked and served to the client, such as JavaScript or CSS content. In those cases it was a simple matter of removing &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; and the subsequent concatenation and replace it with a call to the &lt;tt class=&#34;docutils literal&#34;&gt;absURL&lt;/tt&gt; function, like so:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;pure-button&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;{{ &amp;quot;index.xml&amp;quot; | absURL }}&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;[...]&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Normalizing the post category links turned out to be a bit more complicated than this simple substitution because these links needed to include more URL fragments to create the complete path. In order to correctly concatenate and then normalize these URLs, I turned to another of Hugo&#39;s built-in functions: &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/functions/printf/&#34;&gt;printf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hugo&#39;s templating system is built almost entirely on top of Go&#39;s built-in &lt;a class=&#34;reference external&#34; href=&#34;https://golang.org/pkg/text/template/&#34;&gt;template package&lt;/a&gt;, which makes things very familiar if you have worked with Go templates before. It also means that Hugo can expose a lot of Go functions as Hugo functions available inside templates. In this case, Hugo&#39;s &lt;tt class=&#34;docutils literal&#34;&gt;printf&lt;/tt&gt; function exposes Go&#39;s &lt;tt class=&#34;docutils literal&#34;&gt;fmt.Sprintf&lt;/tt&gt; function which works much like &lt;tt class=&#34;docutils literal&#34;&gt;printf&lt;/tt&gt; in C.&lt;/p&gt;
&lt;p&gt;This is the solution I came up with for building the more complicated post category link URLs while still being able to normalize the resulting URL using &lt;tt class=&#34;docutils literal&#34;&gt;absURL&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;post-category post-category-{{ . }}&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;{{ ( printf &amp;quot;categories/%s&amp;quot; . ) | absURL }}&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;{{ . }}&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Unlike in NodeJS, in this case it&#39;s safe to do a simple string concatenation of &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;categories/&amp;lt;category-name&amp;gt;&lt;/span&gt;&lt;/tt&gt; because unlike with file systems, the fragment separator in URLs is always the &lt;tt class=&#34;docutils literal&#34;&gt;/&lt;/tt&gt; character.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;to-be-continued&#34;&gt;
&lt;h2&gt;To be Continued&lt;/h2&gt;
&lt;p&gt;I am very thankful to &lt;tt class=&#34;docutils literal&#34;&gt;purehugo&lt;/tt&gt;&#39;s author, &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca&#34;&gt;&amp;#64;dplesca&lt;/a&gt;, for responding so quickly to my pull request with this change and for merging the pull request within a few hours of my submission. While working on this change I noticed a few other areas where I think &lt;tt class=&#34;docutils literal&#34;&gt;dplesca/purehugo&lt;/tt&gt; could be improved, and I&#39;m looking forward to working on it more as I continue using it to generate my blog and host my site content.&lt;/p&gt;
&lt;p&gt;Hacktoberfest continues on, and I need to start thinking about my next contribution. My school is on a break starting next week, so I&#39;m hoping to find the time to dig into something a bit larger and more challenging based on the projects I&#39;ve seen so far or had recommended to me by classmates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hacktoberfest - Week One</title>
      <link>https://stuartcrust.com/2018/10/hacktoberfest---week-one/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>https://stuartcrust.com/2018/10/hacktoberfest---week-one/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;Hacktoberfest, start! In my &lt;a class=&#34;reference external&#34; href=&#34;2018/09/a-return-to-open-source/&#34;&gt;previous post&lt;/a&gt; I mentioned that I was hoping to find some interesting projects to contribute to this month, and so far I&#39;ve come up with a pretty good shortlist of contributions I want to make.&lt;/p&gt;
&lt;p&gt;To start the month off, I lent a hand to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/lk-geimfari/awesomo&#34;&gt;lk-geimfari/awesomo&lt;/a&gt; to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/lk-geimfari/awesomo/pull/125&#34;&gt;reorganize their list&lt;/a&gt; of Rust projects. They had already reorganized the one for Python and suggested contributors use that as a model for the rest of the reorganizations. There are still a bunch of languages on the list in the &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/lk-geimfari/awesomo/issues/101&#34;&gt;tracking issue&lt;/a&gt;, so head on over and give them a hand!&lt;/p&gt;
&lt;p&gt;The work itself was straight forward; contributors were asked to alphabetize the projects in the list, and provide a table of contents and headings based on the example. I think this was a great first issue for Hacktoberfest because my goal for this month is to contribute to at least two projects that use &lt;a class=&#34;reference external&#34; href=&#34;https://www.rust-lang.org/en-US/&#34;&gt;Rust&lt;/a&gt;, and what better way to find out about cool projects than working with a list chock full of them?&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;alacritty&#34;&gt;
&lt;h2&gt;Alacritty&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://github.com/jwilm/alacritty&#34;&gt;Alacritty&lt;/a&gt; was one of the first projects to catch my eye, not just because it was originally at the top of the list, but also because I saw an announcement post that Alacritty &lt;a class=&#34;reference external&#34; href=&#34;https://www.reddit.com/r/rust/comments/9gl75a/alacritty_now_supports_scrollback/&#34;&gt;now supports terminal scrollback&lt;/a&gt; which introduced me to the existance of the project in the first place. Alacritty claims to be &amp;quot;the fastest terminal emulator in existence&amp;quot;, and uses the GPU for rendering to enable optimizations that aren&#39;t possible using other terminal emulators. Alacritty is still very much in its infancy, with &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/jwilm/alacritty/releases/tag/v0.2.1&#34;&gt;version 0.2.1&lt;/a&gt; as the most recent release at the time of writing. Windows support is planned before a 1.0 release, so if this intrigues you and you&#39;re a Windows developer &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/jwilm/alacritty/issues/28&#34;&gt;have a look at the tracking issue&lt;/a&gt; and see if you can help out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;diesel&#34;&gt;
&lt;h2&gt;Diesel&lt;/h2&gt;
&lt;p&gt;Another project I was aware of before working with this awesome list of Rust projects is &lt;a class=&#34;reference external&#34; href=&#34;http://diesel.rs/&#34;&gt;Diesel&lt;/a&gt;, a safe, extensible object-relational mapper (ORM) for Rust. When deciding on the technology stack for my capstone project this year, I investigated using the &lt;a class=&#34;reference external&#34; href=&#34;https://rocket.rs/overview/&#34;&gt;Rocket&lt;/a&gt; web framework written in Rust, and Diesel is one of the ORMs &lt;a class=&#34;reference external&#34; href=&#34;https://rocket.rs/guide/state/#dependencies&#34;&gt;recommended in the getting started guide&lt;/a&gt;. Diesel provides a comfortable CLI experience for developers familiar with tools like &lt;a class=&#34;reference external&#34; href=&#34;https://guides.rubyonrails.org/active_record_basics.html&#34;&gt;ActiveRecord&lt;/a&gt; from Ruby on Rails and &lt;a class=&#34;reference external&#34; href=&#34;http://docs.sequelizejs.com/&#34;&gt;Sequelize&lt;/a&gt; in NodeJS, but drastically improves on both by leveraging Rust&#39;s type safety and by &amp;quot;eliminat[ing] the possibility of incorrect database interactions at compile time.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;exa&#34;&gt;
&lt;h2&gt;exa&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://the.exa.website/&#34;&gt;exa&lt;/a&gt; is a modern replacement for the built-in unix &lt;tt class=&#34;docutils literal&#34;&gt;ls&lt;/tt&gt; command which aims to have better defaults and more features. I have been using &lt;tt class=&#34;docutils literal&#34;&gt;exa&lt;/tt&gt; myself for a few weeks and I am really enjoying the experience so far. With &lt;tt class=&#34;docutils literal&#34;&gt;ls&lt;/tt&gt; I set up a number of shell aliases and functions to do things like enable human-readable sizes and always show colours; in &lt;tt class=&#34;docutils literal&#34;&gt;exa&lt;/tt&gt; these features are turned on automatically without any setup. I am all for customizability in those cases where it&#39;s absolutely necessary but sane defaults is almost always a better solution, especially with a tool that most of us use hundreds of times a day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;to-be-continued&#34;&gt;
&lt;h2&gt;To be Continued&lt;/h2&gt;
&lt;p&gt;I definitely have some ideas about more projects that I&#39;d like to contribute to after seeing the &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/lk-geimfari/awesomo&#34;&gt;lk-geimfari/awesomo&lt;/a&gt; list, either this month for Hacktoberfest or on an ongoing basis. If Rust isn&#39;t your language of choice, there are similar lists of projects in pretty much every popular language as well as some more obscure ones, so take a look, be inspired, and happy hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
