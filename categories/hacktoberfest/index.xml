<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hacktoberfest on stuart crust</title>
    <link>https://stuartcrust.com/categories/hacktoberfest/</link>
    <description>Recent content in Hacktoberfest on stuart crust</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Oct 2018 00:00:00 -0400</lastBuildDate>
    
        <atom:link href="https://stuartcrust.com/categories/hacktoberfest/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hacktoberfest - Week Two</title>
      <link>https://stuartcrust.com/2018/10/hacktoberfest---week-two/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>https://stuartcrust.com/2018/10/hacktoberfest---week-two/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;Hacktoberfest week two! &lt;a class=&#34;reference external&#34; href=&#34;2018/10/hacktoberfest---week-one/&#34;&gt;Week one&lt;/a&gt; was all about getting into the groove of Hacktoberfest, making a small change to contribute, and finding out about other awesome projects in open source and &lt;a class=&#34;reference external&#34; href=&#34;categories/rust/&#34;&gt;my area of interest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My contribution for this week had a bit more self-interest involved; I contributed a change to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca/purehugo&#34;&gt;dplesca/purehugo&lt;/a&gt;, the &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; blog theme I use for this blog, to &lt;a class=&#34;reference internal&#34; href=&#34;#normalize-urls&#34;&gt;normalize URLs&lt;/a&gt; that use Hugo&#39;s &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; variable.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;the-problem&#34;&gt;
&lt;span id=&#34;normalize-urls&#34;&gt;&lt;/span&gt;&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Using the &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca/purehugo&#34;&gt;dplesca/purehugo&lt;/a&gt; theme, I was noticing that many links to other parts of the site - that is, links that were not external links to e.g. GitHub or Twitter - contained multiple slashes after the site root. Modern web browsers are really good at dealing with partially-malformed URLs so there was no functional problem with any of the links as the browser&#39;s URL parser took over and cleaned them up into a value it could resolve, but it would still be better if the URLs were correctly formatted when Hugo generates the static site content.&lt;/p&gt;
&lt;p&gt;The malformed URLs looked something like this:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;pure-button&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;http://localhost:1313//index.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;[...]&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;post-category post-category-open source&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;http://localhost:1313//categories/open-source&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;open source&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Delving into the template code revealed how &lt;tt class=&#34;docutils literal&#34;&gt;dplesca/purehugo&lt;/tt&gt; was generating the URLs:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;pure-button&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;{{ .Site.BaseURL }}/index.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;[...]&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;post-category post-category-{{ . }}&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;{{ $baseUrl }}/categories/{{ . | urlize }}&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;{{ . }}&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The template string used &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; and appended a slash before the next URL fragment. Since this results in a double slash in the generated output, I presume but have not confirmed that &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; always ends in a trailing slash that needs to be taken into consideration when generating URLs relative the the site&#39;s root.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;the-solution&#34;&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;In a similar way to how we join file paths in NodeJS with &lt;a class=&#34;reference external&#34; href=&#34;https://nodejs.org/api/path.html#path_path_join_paths&#34;&gt;path.join()&lt;/a&gt;, we almost never want to be responsible for building URL paths ourselves. Luckily, Hugo provides &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/functions/&#34;&gt;many built-in helper functions&lt;/a&gt; that cover a whole range of use cases, including the one I decided to use to normalize URL paths throughout &lt;tt class=&#34;docutils literal&#34;&gt;dplesca/purehugo&lt;/tt&gt;: &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/functions/absurl/.&#34;&gt;absURL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the Hugo documentation, &lt;tt class=&#34;docutils literal&#34;&gt;absURL&lt;/tt&gt;&lt;/p&gt;
&lt;blockquote&gt;
Creates an absolute URL based on the configured &lt;tt class=&#34;docutils literal&#34;&gt;baseURL&lt;/tt&gt;.&lt;/blockquote&gt;
&lt;p&gt;where &lt;tt class=&#34;docutils literal&#34;&gt;baseURL&lt;/tt&gt; is the hostname (and path) to the root of the site which is set as part of Hugo&#39;s &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/getting-started/configuration/#all-configuration-settings&#34;&gt;site configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This function was a perfect solution in most of the places where static files need to be linked and served to the client, such as JavaScript or CSS content. In those cases it was a simple matter of removing &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; and the subsequent concatenation and replace it with a call to the &lt;tt class=&#34;docutils literal&#34;&gt;absURL&lt;/tt&gt; function, like so:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;pure-button&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;{{ &amp;quot;index.xml&amp;quot; | absURL }}&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;[...]&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Normalizing the post category links turned out to be a bit more complicated than this simple substitution because these links needed to include more URL fragments to create the complete path. In order to correctly concatenate and then normalize these URLs, I turned to another of Hugo&#39;s built-in functions: &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/functions/printf/&#34;&gt;printf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hugo&#39;s templating system is built almost entirely on top of Go&#39;s built-in &lt;a class=&#34;reference external&#34; href=&#34;https://golang.org/pkg/text/template/&#34;&gt;template package&lt;/a&gt;, which makes things very familiar if you have worked with Go templates before. It also means that Hugo can expose a lot of Go functions as Hugo functions available inside templates. In this case, Hugo&#39;s &lt;tt class=&#34;docutils literal&#34;&gt;printf&lt;/tt&gt; function exposes Go&#39;s &lt;tt class=&#34;docutils literal&#34;&gt;fmt.Sprintf&lt;/tt&gt; function which works much like &lt;tt class=&#34;docutils literal&#34;&gt;printf&lt;/tt&gt; in C.&lt;/p&gt;
&lt;p&gt;This is the solution I came up with for building the more complicated post category link URLs while still being able to normalize the resulting URL using &lt;tt class=&#34;docutils literal&#34;&gt;absURL&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;post-category post-category-{{ . }}&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;{{ ( printf &amp;quot;categories/%s&amp;quot; . ) | absURL }}&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;{{ . }}&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Unlike in NodeJS, in this case it&#39;s safe to do a simple string concatenation of &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;categories/&amp;lt;category-name&amp;gt;&lt;/span&gt;&lt;/tt&gt; because unlike with file systems, the fragment separator in URLs is always the &lt;tt class=&#34;docutils literal&#34;&gt;/&lt;/tt&gt; character.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;to-be-continued&#34;&gt;
&lt;h2&gt;To be Continued&lt;/h2&gt;
&lt;p&gt;I am very thankful to &lt;tt class=&#34;docutils literal&#34;&gt;purehugo&lt;/tt&gt;&#39;s author, &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca&#34;&gt;&amp;#64;dplesca&lt;/a&gt;, for responding so quickly to my pull request with this change and for merging the pull request within a few hours of my submission. While working on this change I noticed a few other areas where I think &lt;tt class=&#34;docutils literal&#34;&gt;dplesca/purehugo&lt;/tt&gt; could be improved, and I&#39;m looking forward to working on it more as I continue using it to generate my blog and host my site content.&lt;/p&gt;
&lt;p&gt;Hacktoberfest continues on, and I need to start thinking about my next contribution. My school is on a break starting next week, so I&#39;m hoping to find the time to dig into something a bit larger and more challenging based on the projects I&#39;ve seen so far or had recommended to me by classmates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Hacktoberfest - Week One</title>
      <link>https://stuartcrust.com/2018/10/hacktoberfest---week-one/</link>
      <pubDate>Thu, 04 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>https://stuartcrust.com/2018/10/hacktoberfest---week-one/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;Hacktoberfest, start! In my &lt;a class=&#34;reference external&#34; href=&#34;2018/09/a-return-to-open-source/&#34;&gt;previous post&lt;/a&gt; I mentioned that I was hoping to find some interesting projects to contribute to this month, and so far I&#39;ve come up with a pretty good shortlist of contributions I want to make.&lt;/p&gt;
&lt;p&gt;To start the month off, I lent a hand to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/lk-geimfari/awesomo&#34;&gt;lk-geimfari/awesomo&lt;/a&gt; to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/lk-geimfari/awesomo/pull/125&#34;&gt;reorganize their list&lt;/a&gt; of Rust projects. They had already reorganized the one for Python and suggested contributors use that as a model for the rest of the reorganizations. There are still a bunch of languages on the list in the &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/lk-geimfari/awesomo/issues/101&#34;&gt;tracking issue&lt;/a&gt;, so head on over and give them a hand!&lt;/p&gt;
&lt;p&gt;The work itself was straight forward; contributors were asked to alphabetize the projects in the list, and provide a table of contents and headings based on the example. I think this was a great first issue for Hacktoberfest because my goal for this month is to contribute to at least two projects that use &lt;a class=&#34;reference external&#34; href=&#34;https://www.rust-lang.org/en-US/&#34;&gt;Rust&lt;/a&gt;, and what better way to find out about cool projects than working with a list chock full of them?&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;alacritty&#34;&gt;
&lt;h2&gt;Alacritty&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://github.com/jwilm/alacritty&#34;&gt;Alacritty&lt;/a&gt; was one of the first projects to catch my eye, not just because it was originally at the top of the list, but also because I saw an announcement post that Alacritty &lt;a class=&#34;reference external&#34; href=&#34;https://www.reddit.com/r/rust/comments/9gl75a/alacritty_now_supports_scrollback/&#34;&gt;now supports terminal scrollback&lt;/a&gt; which introduced me to the existance of the project in the first place. Alacritty claims to be &amp;quot;the fastest terminal emulator in existence&amp;quot;, and uses the GPU for rendering to enable optimizations that aren&#39;t possible using other terminal emulators. Alacritty is still very much in its infancy, with &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/jwilm/alacritty/releases/tag/v0.2.1&#34;&gt;version 0.2.1&lt;/a&gt; as the most recent release at the time of writing. Windows support is planned before a 1.0 release, so if this intrigues you and you&#39;re a Windows developer &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/jwilm/alacritty/issues/28&#34;&gt;have a look at the tracking issue&lt;/a&gt; and see if you can help out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;diesel&#34;&gt;
&lt;h2&gt;Diesel&lt;/h2&gt;
&lt;p&gt;Another project I was aware of before working with this awesome list of Rust projects is &lt;a class=&#34;reference external&#34; href=&#34;http://diesel.rs/&#34;&gt;Diesel&lt;/a&gt;, a safe, extensible object-relational mapper (ORM) for Rust. When deciding on the technology stack for my capstone project this year, I investigated using the &lt;a class=&#34;reference external&#34; href=&#34;https://rocket.rs/overview/&#34;&gt;Rocket&lt;/a&gt; web framework written in Rust, and Diesel is one of the ORMs &lt;a class=&#34;reference external&#34; href=&#34;https://rocket.rs/guide/state/#dependencies&#34;&gt;recommended in the getting started guide&lt;/a&gt;. Diesel provides a comfortable CLI experience for developers familiar with tools like &lt;a class=&#34;reference external&#34; href=&#34;https://guides.rubyonrails.org/active_record_basics.html&#34;&gt;ActiveRecord&lt;/a&gt; from Ruby on Rails and &lt;a class=&#34;reference external&#34; href=&#34;http://docs.sequelizejs.com/&#34;&gt;Sequelize&lt;/a&gt; in NodeJS, but drastically improves on both by leveraging Rust&#39;s type safety and by &amp;quot;eliminat[ing] the possibility of incorrect database interactions at compile time.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;exa&#34;&gt;
&lt;h2&gt;exa&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;reference external&#34; href=&#34;https://the.exa.website/&#34;&gt;exa&lt;/a&gt; is a modern replacement for the built-in unix &lt;tt class=&#34;docutils literal&#34;&gt;ls&lt;/tt&gt; command which aims to have better defaults and more features. I have been using &lt;tt class=&#34;docutils literal&#34;&gt;exa&lt;/tt&gt; myself for a few weeks and I am really enjoying the experience so far. With &lt;tt class=&#34;docutils literal&#34;&gt;ls&lt;/tt&gt; I set up a number of shell aliases and functions to do things like enable human-readable sizes and always show colours; in &lt;tt class=&#34;docutils literal&#34;&gt;exa&lt;/tt&gt; these features are turned on automatically without any setup. I am all for customizability in those cases where it&#39;s absolutely necessary but sane defaults is almost always a better solution, especially with a tool that most of us use hundreds of times a day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;to-be-continued&#34;&gt;
&lt;h2&gt;To be Continued&lt;/h2&gt;
&lt;p&gt;I definitely have some ideas about more projects that I&#39;d like to contribute to after seeing the &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/lk-geimfari/awesomo&#34;&gt;lk-geimfari/awesomo&lt;/a&gt; list, either this month for Hacktoberfest or on an ongoing basis. If Rust isn&#39;t your language of choice, there are similar lists of projects in pretty much every popular language as well as some more obscure ones, so take a look, be inspired, and happy hacking!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
