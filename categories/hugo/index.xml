<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on stuart crust</title>
    <link>https://stuartcrust.com/categories/hugo/</link>
    <description>Recent content in Hugo on stuart crust</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Oct 2018 00:00:00 -0400</lastBuildDate>
    
        <atom:link href="https://stuartcrust.com/categories/hugo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hacktoberfest - Week Two</title>
      <link>https://stuartcrust.com/2018/10/hacktoberfest---week-two/</link>
      <pubDate>Mon, 15 Oct 2018 00:00:00 -0400</pubDate>
      
      <guid>https://stuartcrust.com/2018/10/hacktoberfest---week-two/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;Hacktoberfest week two! &lt;a class=&#34;reference external&#34; href=&#34;2018/10/hacktoberfest---week-one/&#34;&gt;Week one&lt;/a&gt; was all about getting into the groove of Hacktoberfest, making a small change to contribute, and finding out about other awesome projects in open source and &lt;a class=&#34;reference external&#34; href=&#34;categories/rust/&#34;&gt;my area of interest&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;My contribution for this week had a bit more self-interest involved; I contributed a change to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca/purehugo&#34;&gt;dplesca/purehugo&lt;/a&gt;, the &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io&#34;&gt;Hugo&lt;/a&gt; blog theme I use for this blog, to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca/purehugo/pull/26&#34;&gt;normalize URLs&lt;/a&gt; that use Hugo&#39;s &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; variable.&lt;/p&gt;
&lt;div class=&#34;section&#34; id=&#34;the-problem&#34;&gt;
&lt;h2&gt;The Problem&lt;/h2&gt;
&lt;p&gt;Using the &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca/purehugo&#34;&gt;dplesca/purehugo&lt;/a&gt; theme, I was noticing that many links to other parts of the site - that is, links that were not external links to e.g. GitHub or Twitter - contained multiple slashes after the site root. Modern web browsers are really good at dealing with partially-malformed URLs so there was no functional problem with any of the links as the browser&#39;s URL parser took over and cleaned them up into a value it could resolve, but it would still be better if the URLs were correctly formatted when Hugo generates the static site content.&lt;/p&gt;
&lt;p&gt;The malformed URLs looked something like this:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;pure-button&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;http://localhost:1313//index.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;[...]&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;post-category post-category-open source&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;http://localhost:1313//categories/open-source&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;open source&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Delving into the template code revealed how &lt;tt class=&#34;docutils literal&#34;&gt;dplesca/purehugo&lt;/tt&gt; was generating the URLs:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;pure-button&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;{{ .Site.BaseURL }}/index.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;[...]&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;post-category post-category-{{ . }}&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;{{ $baseUrl }}/categories/{{ . | urlize }}&amp;quot;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;{{ . }}&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The template string used &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; and appended a slash before the next URL fragment. Since this results in a double slash in the generated output, I presume but have not confirmed that &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; always ends in a trailing slash that needs to be taken into consideration when generating URLs relative the the site&#39;s root.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;the-solution&#34;&gt;
&lt;h2&gt;The Solution&lt;/h2&gt;
&lt;p&gt;In a similar way to how we join file paths in NodeJS with &lt;a class=&#34;reference external&#34; href=&#34;https://nodejs.org/api/path.html#path_path_join_paths&#34;&gt;path.join()&lt;/a&gt;, we almost never want to be responsible for building URL paths ourselves. Luckily, Hugo provides &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/functions/&#34;&gt;many built-in helper functions&lt;/a&gt; that cover a whole range of use cases, including the one I decided to use to normalize URL paths throughout &lt;tt class=&#34;docutils literal&#34;&gt;dplesca/purehugo&lt;/tt&gt;: &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/functions/absurl/.&#34;&gt;absURL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;From the Hugo documentation, &lt;tt class=&#34;docutils literal&#34;&gt;absURL&lt;/tt&gt;&lt;/p&gt;
&lt;blockquote&gt;
Creates an absolute URL based on the configured &lt;tt class=&#34;docutils literal&#34;&gt;baseURL&lt;/tt&gt;.&lt;/blockquote&gt;
&lt;p&gt;where &lt;tt class=&#34;docutils literal&#34;&gt;baseURL&lt;/tt&gt; is the hostname (and path) to the root of the site which is set as part of Hugo&#39;s &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/getting-started/configuration/#all-configuration-settings&#34;&gt;site configuration&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This function was a perfect solution in most of the places where static files need to be linked and served to the client, such as JavaScript or CSS content. In those cases it was a simple matter of removing &lt;tt class=&#34;docutils literal&#34;&gt;.Site.BaseURL&lt;/tt&gt; and the subsequent concatenation and replace it with a call to the &lt;tt class=&#34;docutils literal&#34;&gt;absURL&lt;/tt&gt; function, like so:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;pure-button&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;{{ &amp;quot;index.xml&amp;quot; | absURL }}&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;[...]&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Normalizing the post category links turned out to be a bit more complicated than this simple substitution because these links needed to include more URL fragments to create the complete path. In order to correctly concatenate and then normalize these URLs, I turned to another of Hugo&#39;s built-in functions: &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/functions/printf/&#34;&gt;printf&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hugo&#39;s templating system is built almost entirely on top of Go&#39;s built-in &lt;a class=&#34;reference external&#34; href=&#34;https://golang.org/pkg/text/template/&#34;&gt;template package&lt;/a&gt;, which makes things very familiar if you have worked with Go templates before. It also means that Hugo can expose a lot of Go functions as Hugo functions available inside templates. In this case, Hugo&#39;s &lt;tt class=&#34;docutils literal&#34;&gt;printf&lt;/tt&gt; function exposes Go&#39;s &lt;tt class=&#34;docutils literal&#34;&gt;fmt.Sprintf&lt;/tt&gt; function which works much like &lt;tt class=&#34;docutils literal&#34;&gt;printf&lt;/tt&gt; in C.&lt;/p&gt;
&lt;p&gt;This is the solution I came up with for building the more complicated post category link URLs while still being able to normalize the resulting URL using &lt;tt class=&#34;docutils literal&#34;&gt;absURL&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class=&#34;code html literal-block&#34;&gt;
&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&amp;quot;post-category post-category-{{ . }}&amp;quot;&lt;/span&gt; &lt;span class=&#34;name attribute&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;literal string&#34;&gt;&#39;{{ ( printf &amp;quot;categories/%s&amp;quot; . ) | absURL }}&#39;&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;{{ . }}&lt;span class=&#34;punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;name tag&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;punctuation&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Unlike in NodeJS, in this case it&#39;s safe to do a simple string concatenation of &lt;tt class=&#34;docutils literal&#34;&gt;&lt;span class=&#34;pre&#34;&gt;categories/&amp;lt;category-name&amp;gt;&lt;/span&gt;&lt;/tt&gt; because unlike with file systems, the fragment separator in URLs is always the &lt;tt class=&#34;docutils literal&#34;&gt;/&lt;/tt&gt; character.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&#34;section&#34; id=&#34;to-be-continued&#34;&gt;
&lt;h2&gt;To be Continued&lt;/h2&gt;
&lt;p&gt;I am very thankful to &lt;tt class=&#34;docutils literal&#34;&gt;purehugo&lt;/tt&gt;&#39;s author, &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca&#34;&gt;&amp;#64;dplesca&lt;/a&gt;, for responding so quickly to my pull request with this change and for merging the pull request within a few hours of my submission. While working on this change I noticed a few other areas where I think &lt;tt class=&#34;docutils literal&#34;&gt;dplesca/purehugo&lt;/tt&gt; could be improved, and I&#39;m looking forward to working on it more as I continue using it to generate my blog and host my site content.&lt;/p&gt;
&lt;p&gt;Hacktoberfest continues on, and I need to start thinking about my next contribution. My school is on a break starting next week, so I&#39;m hoping to find the time to dig into something a bit larger and more challenging based on the projects I&#39;ve seen so far or had recommended to me by classmates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Third Time&#39;s The Charm</title>
      <link>https://stuartcrust.com/2018/09/third-times-the-charm/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 -0400</pubDate>
      
      <guid>https://stuartcrust.com/2018/09/third-times-the-charm/</guid>
      <description>&lt;div class=&#34;document&#34;&gt;


&lt;p&gt;I&#39;ve been meaning to start blogging for a while. Not even blogging &lt;em&gt;consistently&lt;/em&gt;, just writing some long-form-ish pieces on projects that I&#39;ve been working on, things I&#39;ve learned, or things that I might want for my own reference. I&#39;ve tried at least twice before - once when I purchased this domain back in December of &lt;em&gt;2013&lt;/em&gt; and again at the end of 2016 - and as evidenced by the utter lack of content it&#39;s pretty clear I haven&#39;t been successful.&lt;/p&gt;
&lt;p&gt;I made a real attempt to begin publishing at the end of 2016 with the release of that year&#39;s &lt;a class=&#34;reference external&#34; href=&#34;http://adventofcode.com/2016/&#34;&gt;Advent of Code&lt;/a&gt;, but coursework kept me pretty busy and I never managed to finish and publish any of the posts I was working on at the time. I&#39;ll probably revisit some of them, clean them up, and post them - if I still remember what I was writing about - and the rest I may throw into a backlog so that if I ever run into a simiar topic again I can incorporate my draft.&lt;/p&gt;
&lt;p&gt;The reason I&#39;m giving it another try now is I&#39;m taking a course that specifically focuses on open source and includes a requirement that the students blog about their work and experiences as they gain exposure to the open source community. I&#39;m &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/0xazure&#34;&gt;not exactly a stranger&lt;/a&gt; to open source work, but I haven&#39;t had time to be as active as I would like to be so this course is giving me a good excuse to commit more time to getting involved and getting my hands dirty with some contributions.&lt;/p&gt;
&lt;p&gt;On the technical side, this site is built using the static site generator &lt;a class=&#34;reference external&#34; href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt;. I&#39;ve been learning a lot about the ins and outs of Hugo&#39;s project structure as I set this blog up, but so far I&#39;m pretty happy with the results. Hugo is written in &lt;a class=&#34;reference external&#34; href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;, the Google-sponsored C/++ replacement, and Hugo has a very active community that keeps improving the project.&lt;/p&gt;
&lt;p&gt;One issue that I did run into was some confusion over themes in Hugo. Each Hugo site has a &lt;tt class=&#34;docutils literal&#34;&gt;config.toml&lt;/tt&gt; that sets parameters for how the static site content should be generated. Those parameters also include information like social media links that get embedded in certain parts of the Hugo theme that structures the site content and controls the look and feel. Unfortunately, there don&#39;t seem to be standard keys for many of these parameters, so the key name for your GitHub or StackOverflow account information needs to be updated if you decide to change your site theme. You can see some of the work I had to do &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/0xazure/0xazure/commit/ed9a74d58acbcd49f0be613cfd14dbefb725a842&#34;&gt;in this commit&lt;/a&gt; to update these values when I changed my theme from &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/zyro/hyde-x&#34;&gt;hyde-x&lt;/a&gt; to &lt;a class=&#34;reference external&#34; href=&#34;https://github.com/dplesca/purehugo&#34;&gt;purehugo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&#39;ve been keeping my eye on other static site generators as well, but Hugo is very popular and has a lot of great community contributions and support so I&#39;ll be using it for a while yet. Now that things are up and running I might take a stab at customizing my theme a little bit more, an opportunity I wouldn&#39;t have if Hugo and its public themes weren&#39;t open source. Where many static site generators use things like &lt;a class=&#34;reference external&#34; href=&#34;http://handlebarsjs.com/&#34;&gt;Handlebars&lt;/a&gt; or &lt;a class=&#34;reference external&#34; href=&#34;https://shopify.github.io/liquid/&#34;&gt;Liquid&lt;/a&gt; for templating, Hugo actually delegates straight to the built-in &lt;a class=&#34;reference external&#34; href=&#34;https://golang.org/pkg/text/template/&#34;&gt;text.template&lt;/a&gt; package in Go. This makes it immediately familiar to most Go developers, but I haven&#39;t had the opportunity to use Go much - especially recently - so I&#39;ll likely be spending a lot of time reading the documentation.&lt;/p&gt;
&lt;p&gt;Hopefully this third attempt will be the one that sticks. Stay tuned for more posts on topics including &lt;a class=&#34;reference external&#34; href=&#34;categories/open-source&#34;&gt;open source&lt;/a&gt;, &lt;a class=&#34;reference external&#34; href=&#34;categories/nodejs&#34;&gt;NodeJS&lt;/a&gt;, &lt;a class=&#34;reference external&#34; href=&#34;categories/rust&#34;&gt;Rust&lt;/a&gt;, &lt;a class=&#34;reference external&#34; href=&#34;categories/functional-programming&#34;&gt;functional programming&lt;/a&gt;, and anything else I might get up to.&lt;/p&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
