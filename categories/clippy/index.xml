<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Clippy on stuart crust</title>
    <link>https://stuartcrust.com/categories/clippy/</link>
    <description>Recent content in Clippy on stuart crust</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Dec 2018 00:00:00 -0500</lastBuildDate>
    
        <atom:link href="https://stuartcrust.com/categories/clippy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Yak Shaving in Fâ™­</title>
      <link>https://stuartcrust.com/2018/12/yak-shaving-in-f/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 -0500</pubDate>
      
      <guid>https://stuartcrust.com/2018/12/yak-shaving-in-f/</guid>
      <description>

&lt;p&gt;Following on from my &lt;a href=&#34;https://stuartcrust.com/2018/11/i-see-you-are-writing-some-rust&#34;&gt;introduction to &lt;code&gt;clippy&lt;/code&gt; lints&lt;/a&gt;, this week I am beginning my journey of actually implementing a &lt;code&gt;clippy&lt;/code&gt; lint.&lt;/p&gt;

&lt;p&gt;As a refresher, I am implementing &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/issues/1673&#34;&gt;&lt;code&gt;rust-lang/rust-clippy#1673&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To summarize, if the type has a &lt;code&gt;get_foo&lt;/code&gt; method we should suggest naming it &lt;code&gt;foo&lt;/code&gt; instead to follow the API Guidelines for &lt;a href=&#34;https://rust-lang-nursery.github.io/api-guidelines/naming.html#c-getter&#34;&gt;Rust getter name conventions&lt;/a&gt; &lt;em&gt;except&lt;/em&gt; for cases of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_unchecked&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_unchecked_mut&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_ref&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This should be enough to get me started on a style lint for this convention, I should have some time over the next couple days to start digging into this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;clippy-s-author-lint&#34;&gt;&lt;code&gt;clippy&lt;/code&gt;&amp;rsquo;s Author Lint&lt;/h2&gt;

&lt;p&gt;In typical TDD fashion, I want to start with the test case, the code I want to lint against, so I can test my implementation and drive design.
I&amp;rsquo;ve started off with the simple case of detecting the invalid style rather than worrying about whitelisting the exceptions identified.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub struct MyStruct {
    id: u32
}

impl MyStruct {
    pub fn get_id(&amp;amp;self) -&amp;gt; u32 {
        self.id
    }
}

fn main() {
   let s = MyStruct { id: 42 };

   #[clippy::author]
   let id = s.get_id();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve also added the &lt;code&gt;#[clippy::author]&lt;/code&gt; annotation as &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md#author-lint&#34;&gt;suggested by &lt;code&gt;clippy&lt;/code&gt;&amp;rsquo;s contributing documentation&lt;/a&gt; to generate a starting point for the lint.&lt;/p&gt;

&lt;p&gt;Next, I have to run the test to produce a &lt;code&gt;.stdout&lt;/code&gt; file with the code generated by the &lt;code&gt;#[clippy::author]&lt;/code&gt; lint. The instructions say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the command was executed successfully, you can copy the code over to where you are implementing your lint.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;rsquo;s try it out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ TESTNAME=ui/getter_prefix cargo test --test compile-test
    Finished dev [unoptimized + debuginfo] target(s) in 0.15s
     Running target/debug/deps/compile_test-f89d0316ceade355

running 1 test

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 29 filtered out


running 1 test
test [ui] ui/getter_prefix.rs ... FAILED

failures:

---- [ui] ui/getter_prefix.rs stdout ----
normalized stdout:
if_chain! {
    if let StmtKind::Decl(ref decl, _) = stmt.node
    if let DeclKind::Local(ref local) = decl.node;
    if let Some(ref init) = local.init
    if let ExprKind::MethodCall(ref method_name, ref generics, ref args) = init.node;
    // unimplemented: `ExprKind::MethodCall` is not further destructured at the moment
    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.node;
    if name.node.as_str() == &amp;quot;id&amp;quot;;
    then {
        // report your lint here
    }
}


expected stdout:


diff of stdout:

+if_chain! {
+    if let StmtKind::Decl(ref decl, _) = stmt.node
+    if let DeclKind::Local(ref local) = decl.node;
+    if let Some(ref init) = local.init
+    if let ExprKind::MethodCall(ref method_name, ref generics, ref args) = init.node;
+    // unimplemented: `ExprKind::MethodCall` is not further destructured at the moment
+    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.node;
+    if name.node.as_str() == &amp;quot;id&amp;quot;;
+    then {
+        // report your lint here
+    }
+}
+

The actual stdout differed from the expected stdout.
Actual stdout saved to /Users/scrust/devel/rust-clippy/target/debug/test_build_base/getter_prefix.stdout
To update references, run this command from build directory:
tests/ui/update-references.sh &#39;/Users/scrust/devel/rust-clippy/target/debug/test_build_base&#39; &#39;getter_prefix.rs&#39;

error: 1 errors occurred comparing output.
status: exit code: 0
command: &amp;quot;target/debug/clippy-driver&amp;quot; &amp;quot;tests/ui/getter_prefix.rs&amp;quot; &amp;quot;-L&amp;quot; &amp;quot;/Users/scrust/devel/rust-clippy/target/debug/test_build_base&amp;quot; &amp;quot;--target=x86_64-apple-darwin&amp;quot; &amp;quot;-C&amp;quot; &amp;quot;prefer-dynamic&amp;quot; &amp;quot;-o&amp;quot; &amp;quot;/Users/scrust/devel/rust-clippy/target/debug/test_build_base/getter_prefix.stage-id&amp;quot; &amp;quot;-L&amp;quot; &amp;quot;target/debug&amp;quot; &amp;quot;-L&amp;quot; &amp;quot;target/debug/deps&amp;quot; &amp;quot;-Dwarnings&amp;quot; &amp;quot;-L&amp;quot; &amp;quot;/Users/scrust/devel/rust-clippy/target/debug/test_build_base/getter_prefix.stage-id.aux&amp;quot; &amp;quot;-A&amp;quot; &amp;quot;unused&amp;quot;
stdout:
------------------------------------------
if_chain! {
    if let StmtKind::Decl(ref decl, _) = stmt.node
    if let DeclKind::Local(ref local) = decl.node;
    if let Some(ref init) = local.init
    if let ExprKind::MethodCall(ref method_name, ref generics, ref args) = init.node;
    // unimplemented: `ExprKind::MethodCall` is not further destructured at the moment
    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.node;
    if name.node.as_str() == &amp;quot;id&amp;quot;;
    then {
        // report your lint here
    }
}

------------------------------------------
stderr:
------------------------------------------

------------------------------------------

thread &#39;[ui] ui/getter_prefix.rs&#39; panicked at &#39;explicit panic&#39;, /Users/scrust/.cargo/registry/src/github.com-1ecc6299db9ec823/compiletest_rs-0.3.17/src/runtest.rs:2553:9
note: Run with `RUST_BACKTRACE=1` for a backtrace.


failures:
    [ui] ui/getter_prefix.rs

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 225 filtered out

test compile_test ... FAILED

failures:

---- compile_test stdout ----
thread &#39;compile_test&#39; panicked at &#39;Some tests failed&#39;, /Users/scrust/.cargo/registry/src/github.com-1ecc6299db9ec823/compiletest_rs-0.3.17/src/lib.rs:89:22


failures:
    compile_test

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 0 filtered out

error: test failed, to rerun pass &#39;--test compile-test&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wow that&amp;rsquo;s a lot out output.
More importantly, I don&amp;rsquo;t actually know if it worked.
I see&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 29 filtered out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;but then I see&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;The actual stdout differed from the expected stdout.
Actual stdout saved to /Users/scrust/devel/rust-clippy/target/debug/test_build_base/getter_prefix.stdout
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 225 filtered out

test compile_test ... FAILED
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also don&amp;rsquo;t see any generated &lt;code&gt;.stdout&lt;/code&gt; file, so I&amp;rsquo;m going to assume there&amp;rsquo;s something wrong with my test case.&lt;/p&gt;

&lt;p&gt;If I remove the author lint tag, I get a different result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ TESTNAME=ui/getter_prefix cargo test --test compile-test
    Finished dev [unoptimized + debuginfo] target(s) in 0.16s
     Running target/debug/deps/compile_test-f89d0316ceade355

running 1 test

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 29 filtered out


running 1 test
test [ui] ui/getter_prefix.rs ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 225 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out

test compile_test ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This all seems to pass, but I still don&amp;rsquo;t see a generated &lt;code&gt;.stdout&lt;/code&gt; file, and I&amp;rsquo;ve also lost any output the &lt;code&gt;#[clippy:author]&lt;/code&gt; annotation would have given me.&lt;/p&gt;

&lt;p&gt;I noticed a line from the earlier, possibly failed, test run:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To update references, run this command from build directory:
tests/ui/update-references.sh &amp;lsquo;/Users/scrust/devel/rust-clippy/target/debug/test_build_base&amp;rsquo; &amp;lsquo;getter_prefix.rs&amp;rsquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What does this do?
What&amp;rsquo;s a &amp;ldquo;reference&amp;rdquo;?
&lt;code&gt;clippy&lt;/code&gt;&amp;rsquo;s documentation doesn&amp;rsquo;t seem to mention &lt;code&gt;tests/ui/update-references.sh&lt;/code&gt; at all, though there is a mention of &lt;code&gt;tests/ui/update-all-references.sh&lt;/code&gt; which seems to update all of the existing &lt;code&gt;.stderr&lt;/code&gt; files that drive the UI tests.&lt;/p&gt;

&lt;p&gt;It turns out that running &lt;code&gt;tests/ui/update-references.sh&lt;/code&gt; is necessary to actually write the &lt;code&gt;.stdout&lt;/code&gt; file.
I wasn&amp;rsquo;t expecting this extra step because the way the instructions are phrased I though running the test would generate the &lt;code&gt;.stdout&lt;/code&gt; file automatically.
For the test I wrote, &lt;code&gt;#[clippy::author]&lt;/code&gt; generated a &lt;code&gt;.stdout&lt;/code&gt; file with the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;if_chain! {
    if let StmtKind::Decl(ref decl, _) = stmt.node
    if let DeclKind::Local(ref local) = decl.node;
    if let Some(ref init) = local.init
    if let ExprKind::MethodCall(ref method_name, ref generics, ref args) = init.node;
    // unimplemented: `ExprKind::MethodCall` is not further destructured at the moment
    if let PatKind::Binding(BindingAnnotation::Unannotated, _, name, None) = local.pat.node;
    if name.node.as_str() == &amp;quot;id&amp;quot;;
    then {
        // report your lint here
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m not at all familiar with the &lt;code&gt;if_chain!&lt;/code&gt; macro or any of these datatypes, so I definitely have some reading to do so I can understand what this snippet actually does.
I do see &lt;code&gt;if name.node.as_str() == &amp;quot;id&amp;quot;;&lt;/code&gt; which seems to match the &lt;code&gt;id&lt;/code&gt; field on &lt;code&gt;MyStruct&lt;/code&gt; which is about the only piece I understand without delving deeper.&lt;/p&gt;

&lt;p&gt;Out of curiosity after reading a number of other lint tests, I decided to update main and added an assert statement:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;fn main() {
   let s = MyStruct { id: 42 };

    #[clippy::author]
    let id = s.get_id();

    assert_eq!(id, 42);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and got yet another different result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ TESTNAME=ui/getter_prefix cargo test --test compile-test
    Finished dev [unoptimized + debuginfo] target(s) in 0.16s
     Running target/debug/deps/compile_test-f89d0316ceade355

running 1 test

running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 29 filtered out


running 1 test
test [ui] ui/getter_prefix.rs ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 225 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out


running 0 tests

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 1 filtered out

test compile_test ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;m not sure the &lt;code&gt;#[clippy::author]&lt;/code&gt; annotation is going to help me too much in implementing this lint.
Right now I don&amp;rsquo;t know enough about &lt;code&gt;clippy&lt;/code&gt; or the datatypes it uses to make heads or tails of the generated code, and the results of my test are inconsistent depending on various combinations of &lt;code&gt;assert_eq!&lt;/code&gt; and the author annotation.
This definitely calls for more research, so until next week it looks like I&amp;rsquo;ll be getting to grips with some of &lt;code&gt;rustc&lt;/code&gt;&amp;rsquo;s compiler internals.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>I See You Are Writing Some Rust</title>
      <link>https://stuartcrust.com/2018/11/i-see-you-are-writing-some-rust/</link>
      <pubDate>Sun, 25 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>https://stuartcrust.com/2018/11/i-see-you-are-writing-some-rust/</guid>
      <description>

&lt;h1 id=&#34;would-you-like-some-help-with-that&#34;&gt;Would You Like Some Help With That?&lt;/h1&gt;

&lt;p&gt;In my &lt;a href=&#34;https://stuartcrust.com/2018/11/opinionated-formatting&#34;&gt;last post&lt;/a&gt; I wrote a bit about code linting and code formatting, particularly in more modern programming languages like Rust and Go where such tools come first-class as part of the language&amp;rsquo;s toolchain.
In addition to Rust&amp;rsquo;s &lt;code&gt;rustfmt&lt;/code&gt; tool which formats Rust code according to style guidelines, Rust&amp;rsquo;s ecosystem also has a tool called &lt;code&gt;clippy&lt;/code&gt; which is a much more opinionated tool &amp;ldquo;to catch common mistakes and improve your Rust code.&amp;rdquo;&lt;/p&gt;

&lt;h2 id=&#34;introducing-clippy&#34;&gt;Introducing &lt;code&gt;clippy&lt;/code&gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt; _____________________________________
/ I see you are writing some Rust.    \
\ Would you like some help with that? /
 -------------------------------------
 \
  \
    /  \
    |  |
    @  @
    |  |
    || |/
    || ||
    |\_/|
    \___/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;clippy&lt;/code&gt; currently has &lt;a href=&#34;https://rust-lang.github.io/rust-clippy/master/index.html&#34;&gt;288 lints&lt;/a&gt; to help developers write better Rust code.
The lints are broken down into various categories such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;style: code that should be written in a more idiomatic way (e.g. &lt;code&gt;if x.len() == 0 {...}&lt;/code&gt; could be re-written as &lt;code&gt;if x.is_empty() {...}&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;correctness: code that it outright wrong of very useless (e.g. ensuring syntax when creating regexes)&lt;/li&gt;
&lt;li&gt;complexity: code that is more complex than necessary (e.g. &lt;code&gt;if x == true {...}&lt;/code&gt; could be re-written as &lt;code&gt;if x {...}&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;as well as &lt;a href=&#34;https://github.com/rust-lang/rust-clippy#clippy&#34;&gt;many others&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve been interested in contributing to a Rust tooling project since I did my &lt;a href=&#34;https://stuartcrust.com/2018/10/hacktoberfest-week-one/&#34;&gt;initial Rust project overview&lt;/a&gt; as part of &lt;a href=&#34;https://stuartcrust.com/categories/hacktoberfest/&#34;&gt;Hacktoberfest 2018&lt;/a&gt;.
Good tooling is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Force_multiplication&#34;&gt;force multiplier&lt;/a&gt; in software development, and improving tooling - especially tooling that is &amp;ldquo;blessed&amp;rdquo; and supported by the core language team - can reach so many more people than small purpose-built tools set up for individual projects.&lt;/p&gt;

&lt;p&gt;During Hacktoberfest, I ran across &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/issues/1673&#34;&gt;&lt;code&gt;rust-lang/rust-clippy#1673&lt;/code&gt;&lt;/a&gt; but because of the time constraints on Hacktoberfest contributions along with my other coursework I didn&amp;rsquo;t have time to claim the issue.&lt;/p&gt;

&lt;p&gt;The full issue is as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is not idiomatic in Rust to have setters and getters. Make the field public instead.
If the type only has a &lt;code&gt;get_foo&lt;/code&gt; method but not a &lt;code&gt;set_foo&lt;/code&gt; method, suggest naming it &lt;code&gt;foo&lt;/code&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This seemed like a relatively simple lint to implement which would hopefully introduce me to a number of features &lt;code&gt;clippy&lt;/code&gt; uses when analyzing Rust code and inspecting the representation that the &lt;code&gt;rustc&lt;/code&gt; compiler sees before it generates build artifacts.
Once Hacktoberfest was over and I cleared some work off my plate, I went back and asked if the lint &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/issues/1673#issuecomment-440137309&#34;&gt;was still up for grabs&lt;/a&gt; before I invested the time to attempt an implementation.
&lt;a href=&#34;https://twitter.com/Manishearth&#34;&gt;Manish Goregaokar&lt;/a&gt; of the &lt;a href=&#34;https://www.rust-lang.org/en-US/team.html#Dev-tools-team&#34;&gt;Rust dev tools team&lt;/a&gt; got back to me almost immediately:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Actually, I&amp;rsquo;m not sure if this really is valid rust style &amp;ndash; setters and getters may be added to future proof an API, for example.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Manish raised the excellent point that getters and setters are in fact valid Rust style and I agreed, so I thought I was going to have to find another issue to work on and moved to &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/issues/1673#issuecomment-440436914&#34;&gt;close the issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I was worried that I would run into a similar situation with other issues I was interested in working on, so I reached out to Manish directly on the &lt;code&gt;wg-clippy&lt;/code&gt; Discord channel and asked about another issue I was interested in working on:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;@manishearth i was interested in picking up &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/issues/1673&#34;&gt;https://github.com/rust-lang/rust-clippy/issues/1673&lt;/a&gt; but i agree with your comment that it may not be a desirable lint to have&lt;/p&gt;

&lt;p&gt;i&amp;rsquo;m looking at &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/issues/2144&#34;&gt;https://github.com/rust-lang/rust-clippy/issues/2144&lt;/a&gt; now, or if there&amp;rsquo;s another &lt;code&gt;good first issue&lt;/code&gt; that&amp;rsquo;s up for grabs i&amp;rsquo;d definitely be interested in taking a look!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got a response pretty quickly:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;that seems fine!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;However, activity on the original issue I was interested in had clearly caught some attention, and I got into a discussion with user &lt;a href=&#34;https://github.com/hcpl&#34;&gt;hcpl&lt;/a&gt; about other use cases for the lint, specifically:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If the type only has a &lt;code&gt;get_foo&lt;/code&gt; method but not a &lt;code&gt;set_foo&lt;/code&gt; method, suggest naming it &lt;code&gt;foo&lt;/code&gt; instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/issues/1673#issuecomment-440460968&#34;&gt;turned out&lt;/a&gt; that there was already some precedence for this style in the Rust standard library, and the Rust API Guidelines has an &lt;a href=&#34;https://rust-lang-nursery.github.io/api-guidelines/naming.html#c-getter&#34;&gt;entire section&lt;/a&gt; about Rust conventions for getter names. Except for the cases of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_unchecked&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_unchecked_mut&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_ref&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;which have some special meanings in Rust related to &lt;a href=&#34;https://doc.rust-lang.org/book/second-edition/ch03-01-variables-and-mutability.html&#34;&gt;data mutability&lt;/a&gt;, references, or &lt;a href=&#34;https://doc.rust-lang.org/book/second-edition/ch19-01-unsafe-rust.html&#34;&gt;unsafe code&lt;/a&gt;, the &lt;code&gt;get_&lt;/code&gt; prefix is not generally used in Rust.
Searching for these exceptions also turned up an &lt;a href=&#34;https://github.com/rust-lang/rust/issues/27745&#34;&gt;unstable feature relating to &lt;code&gt;TypeId&lt;/code&gt;&lt;/a&gt; to support &lt;a href=&#34;https://en.wikipedia.org/wiki/Reflection_%28computer_programming%29&#34;&gt;reflection&lt;/a&gt; that &lt;em&gt;does&lt;/em&gt; include the &lt;code&gt;get_&lt;/code&gt; prefix even though it&amp;rsquo;s &lt;a href=&#34;https://github.com/rust-lang/rust/issues/27745#issuecomment-138511187&#34;&gt;not supposed to&lt;/a&gt;, which goes to show that implementing this lint could be very valuable to help maintain style even in core Rust projects and the compiler.&lt;/p&gt;

&lt;p&gt;After some good back-and-forth discussion with &lt;a href=&#34;https://github.com/hcpl&#34;&gt;hcpl&lt;/a&gt; and &lt;a href=&#34;https://github.com/flip1995&#34;&gt;Philipp Krones&lt;/a&gt;, I &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/issues/1673#issuecomment-441304062&#34;&gt;summarized the proposed refinements&lt;/a&gt; to the filed issue:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To summarize, if the type has a &lt;code&gt;get_foo&lt;/code&gt; method we should suggest naming it &lt;code&gt;foo&lt;/code&gt; instead to follow the API Guidelines for &lt;a href=&#34;https://rust-lang-nursery.github.io/api-guidelines/naming.html#c-getter&#34;&gt;Rust getter name conventions&lt;/a&gt; &lt;em&gt;except&lt;/em&gt; for cases of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_mut&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_unchecked&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_unchecked_mut&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_ref&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This should be enough to get me started on a style lint for this convention, I should have some time over the next couple days to start digging into this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With better clarity on what the lint should implement as well as some known exceptions, I was in a position to start getting the project set up and go through all the steps of onboarding onto a new project.&lt;/p&gt;

&lt;h2 id=&#34;working-on-clippy&#34;&gt;Working on &lt;code&gt;clippy&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;To start implementing the lint, I had to go through all the usual steps of forking and cloning &lt;code&gt;clippy&lt;/code&gt; and making sure I could build the project locally before I could start digging into code.
After cloning the project, I went ahead and tried to build &lt;code&gt;clippy&lt;/code&gt; locally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cargo --version
cargo 1.32.0-nightly (1fa308820 2018-10-31)

$ cargo build

[snip]

error[E0050]: method `check_pat` has 4 parameters but the declaration in trait `rustc::lint::EarlyLintPass::check_pat` has 3
   --&amp;gt; clippy_lints/src/misc_early.rs:244:66
    |
244 |     fn check_pat(&amp;amp;mut self, cx: &amp;amp;EarlyContext&amp;lt;&#39;_&amp;gt;, pat: &amp;amp;Pat, _: &amp;amp;mut bool) {
    |                                                                  ^^^^^^^^^ expected 3 parameters, found 4
    |
    = note: `check_pat` from trait: `fn(&amp;amp;mut Self, &amp;amp;rustc::lint::EarlyContext&amp;lt;&#39;_&amp;gt;, &amp;amp;syntax::ast::Pat)`

error: aborting due to previous error

For more information about this error, try `rustc --explain E0050`.
error: Could not compile `clippy_lints`.
warning: build failed, waiting for other jobs to finish...
error: build failed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Oops, that&amp;rsquo;s not good.
I knew &lt;code&gt;clippy&lt;/code&gt; relied heavily on features from the &lt;code&gt;nightly&lt;/code&gt; release channel, and, as the name implies, the &lt;code&gt;nightly&lt;/code&gt; channel is released every night with new changes and improvements.
&lt;code&gt;clippy&lt;/code&gt; must be making use of some new feature here and my &lt;code&gt;nightly&lt;/code&gt; Rust is out of date.
I updated Rust with &lt;code&gt;rustup&lt;/code&gt; and then tried again to build &lt;code&gt;clippy&lt;/code&gt; locally:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ rustup update

[snip]

nightly-x86_64-apple-darwin updated - rustc 1.32.0-nightly (5aff30734 2018-11-19)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cargo --version
cargo 1.32.0-nightly (b3d0b2e54 2018-11-15)

$ cargo build

[snip]

Finished dev [unoptimized + debuginfo] target(s) in 2m 03s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now that I knew I really had to watch the versions and make sure everything was up to date, I was ready to start thinking about implementing the lint.&lt;/p&gt;

&lt;h3 id=&#34;a-few-days-later&#34;&gt;A Few Days Later&amp;hellip;&lt;/h3&gt;

&lt;p&gt;A challenge that I&amp;rsquo;ve been running into working on &lt;code&gt;clippy&lt;/code&gt; is that because it relies so heavily on &lt;code&gt;nightly&lt;/code&gt; compiler features, and both &lt;code&gt;clippy&lt;/code&gt; and &lt;code&gt;nightly&lt;/code&gt; are moving targets, my local &lt;code&gt;clippy&lt;/code&gt; checkout can very quickly get out of date not only from upstream but also from the &lt;code&gt;nightly&lt;/code&gt; release channel.&lt;/p&gt;

&lt;p&gt;For example, I updated everything recently and got:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cargo build

   Compiling clippy_lints v0.0.212 (/Users/azure/devel/rust-clippy/clippy_lints)
error[E0615]: attempted to take value of method `abi` on type `rustc_target::abi::Align`
    --&amp;gt; clippy_lints/src/types.rs:1067:93
     |
1067 |                 if let Some(from_align) = cx.layout_of(from_ptr_ty.ty).ok().map(|a| a.align.abi);
     |                                                                                             ^^^
     |
     = help: maybe a `()` to call it is missing?

error[E0615]: attempted to take value of method `abi` on type `rustc_target::abi::Align`
    --&amp;gt; clippy_lints/src/types.rs:1068:89
     |
1068 |                 if let Some(to_align) = cx.layout_of(to_ptr_ty.ty).ok().map(|a| a.align.abi);
     |                                                                                         ^^^
     |
     = help: maybe a `()` to call it is missing?

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0615`.
error: Could not compile `clippy_lints`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which is the change introduced in &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/pull/3452&#34;&gt;rust-lang/rust-clippy#3452&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For whatever reason, even after updating Rust and using the same tool versions as in &lt;a href=&#34;https://travis-ci.org/rust-lang/rust-clippy/builds/458715770&#34;&gt;this passing test&lt;/a&gt; for the above pull request the project does not build locally.
Luckily reverting back to &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/pull/3449&#34;&gt;&lt;code&gt;61501b2810d887367d360025398dd9280c4bcd8b&lt;/code&gt;&lt;/a&gt; lets me compile the project so I can continue working without getting &lt;em&gt;too&lt;/em&gt; out of date with upstream, but there&amp;rsquo;s a lot of churn and things often break for unexplained reasons.&lt;/p&gt;

&lt;p&gt;I reached out to &lt;a href=&#34;https://github.com/matthiaskrgr&#34;&gt;Matthias KrÃ¼ger&lt;/a&gt;, the original author of &lt;code&gt;#3453&lt;/code&gt;, on the &lt;code&gt;wg-rust&lt;/code&gt; Discord channel to find out what was going on.
It turns out that sometimes even the &lt;code&gt;nightly&lt;/code&gt; release channel isn&amp;rsquo;t &lt;a href=&#34;https://en.wikipedia.org/wiki/Bleeding_edge_technology&#34;&gt;bleeding-edge&lt;/a&gt; enough to work on &lt;code&gt;clippy&lt;/code&gt; lints and a tool called &lt;a href=&#34;https://github.com/kennytm/rustup-toolchain-install-master&#34;&gt;&lt;code&gt;rustup-toolchain-install-master&lt;/code&gt;&lt;/a&gt; is necessary to install compiler artifacts directly from Rust&amp;rsquo;s continuous integration pipeline that haven&amp;rsquo;t even been published to the &lt;code&gt;nightly&lt;/code&gt; channel yet.
This information is also documented in &lt;code&gt;clippy&lt;/code&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md#fixing-build-failures-caused-by-rust&#34;&gt;&lt;code&gt;CONTRIBUTING.MD&lt;/code&gt; file&lt;/a&gt;, but it&amp;rsquo;s located at almost the bottom of the document which is why I hadn&amp;rsquo;t run across the information earlier.
It is very true that it pays to read the documentation, and in many other projects asking a question about why my local build was failing in this way would receive comments to &amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/RTFM&#34;&gt;RTFM&lt;/a&gt;&amp;rdquo;.
However, my experiences in the Rust community have been nothing but positive, everyone I have interacted with has been very helpful, and even &amp;ldquo;big names&amp;rdquo; in the community are accessible and directly engaged in projects and contributor mentorship.&lt;/p&gt;

&lt;h2 id=&#34;to-be-continued&#34;&gt;To Be Continued&amp;hellip;&lt;/h2&gt;

&lt;p&gt;This week was all about finding my footing and getting my local environment set up to actually do development work on &lt;code&gt;clippy&lt;/code&gt;.
In the coming weeks I&amp;rsquo;ll tackle actually implementing the lint now that the requirements and goals have been fleshed out, and I hope to have something up for code review soon to get community feedback on improving the lint and catching anything I&amp;rsquo;ve missed.&lt;/p&gt;

&lt;p&gt;First up: reading &lt;a href=&#34;https://twitter.com/llogiq&#34;&gt;llogiq&lt;/a&gt;&amp;rsquo;s blogpost on &lt;a href=&#34;https://llogiq.github.io/2015/06/04/workflows.html&#34;&gt;writing &lt;code&gt;clippy&lt;/code&gt; lints&lt;/a&gt;.
Then I&amp;rsquo;ll create a starting point for my lint with &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/blob/master/CONTRIBUTING.md#author-lint&#34;&gt;&lt;code&gt;clippy&lt;/code&gt;&amp;rsquo;s internal &lt;code&gt;author&lt;/code&gt; lint&lt;/a&gt; as well as reading some &lt;a href=&#34;https://github.com/rust-lang/rust-clippy/tree/master/clippy_lints/src&#34;&gt;existing lints&lt;/a&gt; to get a general idea of lint structure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Opinionated Formatting</title>
      <link>https://stuartcrust.com/2018/11/opinionated-formatting/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 -0500</pubDate>
      
      <guid>https://stuartcrust.com/2018/11/opinionated-formatting/</guid>
      <description>

&lt;p&gt;This week in class we talked about code linting and code formatting using &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; and &lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt;.
These kinds of tools automate a lot of the otherwise labour-intensive and easy-to-miss nitpicks reviewers often leave on pull requests, freeing up time to review much more important elements such as design and code structure.
Many tech companies - &lt;a href=&#34;https://google.github.io/styleguide/&#34;&gt;Google&lt;/a&gt;, &lt;a href=&#34;http://airbnb.io/javascript/&#34;&gt;AirBnB&lt;/a&gt;, &lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions&#34;&gt;Microsoft&lt;/a&gt; to name a few - have their own code style guides, much in the same way that writing organizations (&lt;a href=&#34;https://www.bbc.co.uk/academy/en/collections/news-style-guide&#34;&gt;news organizations&lt;/a&gt; and &lt;a href=&#34;https://www.apastyle.org/&#34;&gt;scientific publishing&lt;/a&gt;, for example) have documents that outline how to maintain consistency in publications across many hundreds of outlets and thousands of writers, and the idea of a style guide is not new.
However, the idea of automating this style checking to help developers maintain a consistent style has gained a lot more traction in recent years thanks in part to style and formatting tools coming standard and enabled by default in many modern programming languages.&lt;/p&gt;

&lt;h2 id=&#34;formatting-as-a-first-class-tool&#34;&gt;Formatting as a First-Class Tool&lt;/h2&gt;

&lt;p&gt;I was first exposed to this idea of a universal formatter as part of a language&amp;rsquo;s toolchain when I started experimenting with &lt;a href=&#34;https://golang.org/&#34;&gt;Go&lt;/a&gt;.
Go&amp;rsquo;s &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34;&gt;&lt;code&gt;gofmt&lt;/code&gt;&lt;/a&gt; enforces a consistent style not just within one project, but across the &lt;em&gt;entire&lt;/em&gt; ecosystem of Go code, making even foreign codebases more accessible because of their consistent style.
This consistency helps to reduce visual noise, making it easier to focus on what the code says rather than how it&amp;rsquo;s formatted.
This idea of a universal formatter appears in other languages like &lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt;&amp;rsquo;s own &lt;a href=&#34;https://github.com/rust-lang-nursery/rustfmt&#34;&gt;&lt;code&gt;rustfmt&lt;/code&gt;&lt;/a&gt;, though there are many other tools for enforcing style that predate these tools, such as &lt;a href=&#34;https://www.rubocop.org/en/latest/&#34;&gt;rubocop&lt;/a&gt; for Ruby and &lt;a href=&#34;http://astyle.sourceforge.net/&#34;&gt;astyle&lt;/a&gt; for C and C++.&lt;/p&gt;

&lt;p&gt;In Go and Rust, these formatters increase productivity dramatically because as long as you write syntactically correct code, it can be the ugliest code you have ever written and by passing it through the formatter (and many editors and IDEs will even format the source for you when you save!) you can leave it up to the formatter to make the code pretty and readable.
This means less time fiddling with alignment, worrying about indentation, and dithering over where to break your function call chain to best communicate your intent.
It also means that wars over format like &lt;a href=&#34;https://www.businessinsider.com/tabs-vs-spaces-from-silicon-valley-2016-5&#34;&gt;tabs versus spaces&lt;/a&gt; are dead; the formatter is the absolute arbitrator of the correct style, and because the formatter is consistent across the entire ecosystem there is a lot of pressure for users to conform instead of trying to tweak the formatter to their own personal preferences.&lt;/p&gt;

&lt;p&gt;We still have an &lt;a href=&#34;https://github.com/0xazure/supernova/issues/21&#34;&gt;open issue&lt;/a&gt; on &lt;code&gt;supernova&lt;/code&gt; for implementing &lt;code&gt;rustfmt&lt;/code&gt; as part of our continuous integration process that we hope to close out with a pull request relatively soon so we can be sure all the code contributed to &lt;code&gt;supernova&lt;/code&gt; follows the same format as other projects.&lt;/p&gt;

&lt;h2 id=&#34;build-infrastructure-weirdness&#34;&gt;Build Infrastructure Weirdness&lt;/h2&gt;

&lt;p&gt;Speaking of our continuous integration process, we ran into a very curious issue with &lt;a href=&#34;https://github.com/0xazure/supernova/pull/24&#34;&gt;&lt;code&gt;0xazure/supernova#24&lt;/code&gt;&lt;/a&gt; this week where our builds started failing on the &lt;code&gt;beta&lt;/code&gt; release channel.
The build failure is caused by &lt;code&gt;clippy&lt;/code&gt;&amp;rsquo;s &lt;a href=&#34;https://rust-lang-nursery.github.io/rust-clippy/current/index.html#new_ret_no_self&#34;&gt;&lt;code&gt;new_ret_no_self&lt;/code&gt; lint&lt;/a&gt; which checks to ensure that, as a convention, &lt;code&gt;new&lt;/code&gt; methods are used to make a new instance of a type and return that instance as the return value.
In the issue, the build is only failing on the &lt;code&gt;beta&lt;/code&gt; release channel which was surprising because I was expecting this lint to have failed the build on the &lt;code&gt;stable&lt;/code&gt; release channel as well if it failed on &lt;code&gt;beta&lt;/code&gt;.
To further confuse the issue the build on &lt;code&gt;nightly&lt;/code&gt;, which per our configuration for &lt;code&gt;supernova&lt;/code&gt; is allowed to fail, was successful.&lt;/p&gt;

&lt;p&gt;Digging into the problem some more, it looks like we are running into &lt;a href=&#34;https://github.com/rust-lang-nursery/rust-clippy/issues/3313&#34;&gt;&lt;code&gt;rust-lang-nursery/rust-clippy#3313&lt;/code&gt;&lt;/a&gt; where the &lt;code&gt;new_ret_no_self&lt;/code&gt; lint is incorrectly triggering on a &lt;code&gt;new&lt;/code&gt; function that &lt;em&gt;does&lt;/em&gt; return &lt;code&gt;Self&lt;/code&gt;, it&amp;rsquo;s just wrapped by a container type or tuple.&lt;/p&gt;

&lt;p&gt;Indeed, we can see this from our implementation of &lt;code&gt;Config::new&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;pub fn new(mut args: env::Args) -&amp;gt; Result&amp;lt;Config, &amp;amp;&#39;static str&amp;gt; {
    args.next();

    let username = match args.next() {
        None =&amp;gt; return Err(&amp;quot;No username provided&amp;quot;),
        Some(arg) =&amp;gt; arg,
    };

    let token = args.next();

    Ok(Config { username, token })
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;which triggers the resulting lint failure&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;error: methods called `new` usually return `Self`
  --&amp;gt; src/lib.rs:18:5
   |
18 | /     pub fn new(mut args: env::Args) -&amp;gt; Result&amp;lt;Config, &amp;amp;&#39;static str&amp;gt; {
19 | |         args.next();
20 | |
21 | |         let username = match args.next() {
...  |
28 | |         Ok(Config { username, token })
29 | |     }
   | |_____^
   |
   = note: `-D clippy::new-ret-no-self` implied by `-D warnings`
   = help: for further information visit https://rust-lang-nursery.github.io/rust-clippy/v0.0.212/index.html#new_ret_no_self
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;even though our return type is &lt;code&gt;Result&amp;lt;Config, &amp;amp;&#39;static str&amp;gt;&lt;/code&gt; which unwraps to &lt;code&gt;Config&lt;/code&gt; on success and a &lt;code&gt;static str&lt;/code&gt; when there is an error in creating a new instance.&lt;/p&gt;

&lt;h2 id=&#34;investigating-the-root-cause&#34;&gt;Investigating the Root Cause&lt;/h2&gt;

&lt;p&gt;An important part of build infrastructure is reproducibility: the ability to run a build with the same inputs and get the same outputs.
Without reproducibility we have flaky tests that no one wants to run and worse, no one trusts.
In the case of &lt;code&gt;supernova&lt;/code&gt; we have a build matrix to test on all three release channels: &lt;code&gt;stable&lt;/code&gt;, &lt;code&gt;beta&lt;/code&gt;, and &lt;code&gt;nightly&lt;/code&gt;, and we need to make sure testing on these channels happens in a predictable way.&lt;/p&gt;

&lt;p&gt;It turns out the issue results from how &lt;code&gt;clippy&lt;/code&gt; is installed in each environment.
The recommended way to install &lt;code&gt;clippy&lt;/code&gt; is as a &lt;code&gt;rustup&lt;/code&gt; component using &lt;code&gt;rustup component add clippy-preview&lt;/code&gt;.
However, because &lt;code&gt;clippy&lt;/code&gt; is published as a component for &lt;code&gt;rustup&lt;/code&gt; rather than as some kind of version-pinned project dependency, this command does not install the same version of &lt;code&gt;clippy&lt;/code&gt; across all release channels.
This can be verified as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cargo +stable clippy --version
clippy 0.0.212 (125907ad 2018-09-17)

$ cargo +beta clippy --version
clippy 0.0.212 (b1d03437 2018-10-19)

$ cargo +nightly clippy --version
clippy 0.0.212 (d8b42690 2018-11-04)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that while all of the build numbers are the same (&lt;code&gt;v0.0.212&lt;/code&gt;), the commit hashes and dates are all different.&lt;/p&gt;

&lt;p&gt;It is important to verify that the tool(s) you&amp;rsquo;re using to test or lint your project are the same version in &lt;strong&gt;all&lt;/strong&gt; of your environments, otherwise you&amp;rsquo;ll end up with confusing build failures like the one we did here.
In our case we are testing against &lt;code&gt;beta&lt;/code&gt; and &lt;code&gt;nightly&lt;/code&gt; to have an idea of future changes to the Rust compiler and any new lints that may get added in the future, so failures on anything but &lt;code&gt;stable&lt;/code&gt; are nice-to-have information rather than complete show-stoppers.
In other cases, or in different matrices, it&amp;rsquo;s even more important that the test environment is as consistent as possible and that the number of variables that &lt;em&gt;are&lt;/em&gt; being changed are as small as possible to make tracing failures relatively simple.&lt;/p&gt;

&lt;p&gt;Lint tools are great for catching low-hanging fruit in code review, but you can&amp;rsquo;t blindly trust them.
When there &lt;em&gt;is&lt;/em&gt; a failure, it takes a person&amp;rsquo;s knowledge of the project to determine if the failure is legitimate or if there&amp;rsquo;s a problem in the tool or lint rule and to determine if it&amp;rsquo;s a problem with the submitted code, a problem with the tool configuration, or a false positive in the tool as in this case with &lt;code&gt;clippy&lt;/code&gt;&amp;rsquo;s &lt;code&gt;new_ret_no_self&lt;/code&gt; lint.&lt;/p&gt;

&lt;h2 id=&#34;fixing-the-problem&#34;&gt;Fixing the Problem&lt;/h2&gt;

&lt;p&gt;After &lt;a href=&#34;https://github.com/0xazure/supernova/pull/24#issuecomment-437530272&#34;&gt;reaching out to some friends&lt;/a&gt; in the &lt;code&gt;#rust&lt;/code&gt; IRC channel, we decided to &lt;a href=&#34;https://github.com/0xazure/supernova/pull/27&#34;&gt;not run &lt;code&gt;clippy&lt;/code&gt; on the &lt;code&gt;beta&lt;/code&gt; toolchain&lt;/a&gt; to avoid more false positives like this in the future.
We are keeping &lt;code&gt;clippy&lt;/code&gt; enabled for the &lt;code&gt;nightly&lt;/code&gt; release channel because we are allowing &lt;code&gt;nightly&lt;/code&gt; to fail on Travis so while we will investigate those failures it will not block landing any pull requests if for some reason &lt;code&gt;nightly&lt;/code&gt; or &lt;code&gt;clippy&lt;/code&gt; on &lt;code&gt;nightly&lt;/code&gt; finds fault with our code.&lt;/p&gt;

&lt;p&gt;I also recently filed &lt;a href=&#34;https://github.com/0xazure/supernova/issues/32&#34;&gt;&lt;code&gt;0xazure/supernova#32&lt;/code&gt;&lt;/a&gt; to provide better visibility into the versions of tools we install to match how Travis prints out tooling versions for tools that come automatically installed with the Rust build environment.
This should help us track down version discrepancies and make trouble-shooting failures much quicker.&lt;/p&gt;

&lt;p&gt;After landing the above fix (and &lt;a href=&#34;https://github.com/0xazure/supernova/pull/30&#34;&gt;an extra tweak&lt;/a&gt; so we only run Travis against the &lt;code&gt;master&lt;/code&gt; branch), our builds went fully green &lt;a href=&#34;https://travis-ci.org/0xazure/supernova/builds/455179153&#34;&gt;for the first time&lt;/a&gt; since we enabled Travis on the project!
Setting up automated builds can take a lot of up-front effort, but it pays big dividends as the project grows to ensure the quality of the software being written.
Now we just &lt;a href=&#34;https://github.com/0xazure/supernova/issues/8&#34;&gt;need some tests&lt;/a&gt; so we can verify our code is actually correct&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
